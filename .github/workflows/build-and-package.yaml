name: Build Docker Image

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build (e.g., v4.9.1). If not provided, uses 0.0.0-dev'
        type: string
        required: false
        default: 'v0.0.0-dev'
      registry:
        description: 'Docker registry to use'
        required: true
        default: digiopsacr.azurecr.io
      namespace:
        description: 'Docker namespace to use'
        required: true
        default: wso2  

env:
  DISABLE_V8_COMPILE_CACHE: 1

jobs:
  build-code-server:
    name: Build code-server npm package
    runs-on: ubuntu-22.04
    timeout-minutes: 60
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Install system dependencies
        run: sudo apt update && sudo apt install -y libkrb5-dev

      - name: Cache apt packages
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: quilt
          version: 1.0

      - name: Apply patches
        run: quilt push -a

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: .node-version
          cache: npm
          cache-dependency-path: |
            package-lock.json
            test/package-lock.json

      - name: Install dependencies
        run: SKIP_SUBMODULE_DEPS=1 npm ci

      # Set version for the build
      - name: Set VERSION
        id: version
        run: |
          INPUT_VERSION="${{ inputs.version }}"
          if [ -n "$INPUT_VERSION" ]; then
            # Strip v prefix if present
            VERSION="${INPUT_VERSION#v}"
          else
            VERSION="0.0.0-dev"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Building version: $VERSION"

      - name: Build code-server
        run: npm run build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Get Code's git hash for caching
      - name: Get latest lib/vscode rev
        id: vscode-rev
        run: echo "rev=$(git rev-parse HEAD:./lib/vscode)" >> $GITHUB_OUTPUT

      # Cache VSCode build
      - name: Fetch prebuilt Code package from cache
        id: cache-vscode
        uses: actions/cache@v4
        with:
          path: lib/vscode-reh-web-*
          key: vscode-reh-package-v1-${{ steps.vscode-rev.outputs.rev }}-${{ hashFiles('patches/*.diff', 'ci/build/build-vscode.sh') }}

      - name: Fetch extensions from cache
        uses: actions/cache@v4
        with:
          path: lib/vscode/.build/extensions
          key: vscode-reh-extensions-v1-${{ steps.vscode-rev.outputs.rev }}-${{ hashFiles('patches/*.diff', 'ci/build/build-vscode.sh') }}

      - name: Build vscode
        if: steps.cache-vscode.outputs.cache-hit != 'true'
        run: |
          pushd lib/vscode
          npm ci
          popd
          npm run build:vscode

      # Build release package
      - name: Build release package
        run: npm run release

      # Modify package.json version
      - name: Update package version
        run: |
          echo "Updating version in release/package.json to $VERSION"
          npm version --prefix release "$VERSION" --no-git-tag-version
          
          echo "Updating version in lib/vscode/product.json"
          tmp=$(mktemp)
          jq ".codeServerVersion = \"$VERSION\"" release/lib/vscode/product.json > "$tmp" && mv "$tmp" release/lib/vscode/product.json
          chmod 644 release/lib/vscode/product.json

      # Create package archive
      - name: Create package archive
        run: tar -czf package.tar.gz release

      - name: Create extensions archive
        run: tar -czf extensions.tar.gz -C lib/vscode/.build/extensions .

      - name: Upload npm package artifact
        uses: actions/upload-artifact@v4
        with:
          name: npm-package
          path: ./package.tar.gz
          retention-days: 30

      - name: Upload builtin extensions
        uses: actions/upload-artifact@v4
        with:
          name: extensions
          path: ./extensions.tar.gz
          retention-days: 30

  build-packages-linux:
    name: Build Linux packages (amd64 only)
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: build-code-server
    container: "python:3.8-slim-buster"
    env:
      AR: x86_64-linux-gnu-ar
      AS: x86_64-linux-gnu-as
      CC: x86_64-linux-gnu-gcc
      CPP: x86_64-linux-gnu-cpp
      CXX: x86_64-linux-gnu-g++
      FC: x86_64-linux-gnu-gfortran
      LD: x86_64-linux-gnu-ld
      STRIP: x86_64-linux-gnu-strip
      PKG_CONFIG_PATH: /usr/lib/x86_64-linux-gnu/pkgconfig
      TARGET_ARCH: amd64
      npm_config_arch: x64
      PKG_ARCH: amd64
      npm_config_build_from_source: true
      VERSION: ${{ needs.build-code-server.outputs.version }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: .node-version
          cache: npm
          cache-dependency-path: |
            package-lock.json
            test/package-lock.json

      - name: Install cross-compiler and system dependencies
        run: |
          sed -i 's/deb\.debian\.org/archive.debian.org/g' /etc/apt/sources.list
          dpkg --add-architecture $TARGET_ARCH
          apt update && apt install -y --no-install-recommends \
            crossbuild-essential-$TARGET_ARCH \
            libx11-dev:$TARGET_ARCH \
            libx11-xcb-dev:$TARGET_ARCH \
            libxkbfile-dev:$TARGET_ARCH \
            libsecret-1-dev:$TARGET_ARCH \
            libkrb5-dev:$TARGET_ARCH \
            ca-certificates \
            curl wget rsync gettext-base

      - name: Install dependencies
        run: SKIP_SUBMODULE_DEPS=1 npm ci

      - name: Install nfpm
        run: |
          mkdir -p ~/.local/bin
          curl -sSfL https://github.com/goreleaser/nfpm/releases/download/v2.3.1/nfpm_2.3.1_$(uname -s)_$(uname -m).tar.gz | tar -C ~/.local/bin -zxv nfpm
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Download npm package
        uses: actions/download-artifact@v4
        with:
          name: npm-package

      - name: Extract and build standalone
        run: |
          tar -xzf package.tar.gz
          npm run release:standalone

      - name: Replace node with cross-compile equivalent
        run: |
          node_version=$(node --version)
          wget https://nodejs.org/dist/${node_version}/node-${node_version}-linux-${npm_config_arch}.tar.xz
          tar -xf node-${node_version}-linux-${npm_config_arch}.tar.xz node-${node_version}-linux-${npm_config_arch}/bin/node --strip-components=2
          mv ./node ./release-standalone/lib/node

      - name: Build packages with nfpm
        run: npm run package $PKG_ARCH

      - name: Upload packages artifact
        uses: actions/upload-artifact@v4
        with:
          name: packages-linux-amd64
          path: ./release-packages/*
          retention-days: 30

  build-docker-image:
    name: Build Docker image
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [build-code-server, build-packages-linux]
    env:
      VERSION: ${{ needs.build-code-server.outputs.version }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          submodules: true

      # Download only AMD64 packages (sufficient for Docker build)
      - name: Download amd64 packages
        uses: actions/download-artifact@v4
        with:
          name: packages-linux-amd64
          path: release-packages

      - name: Download builtin extensions
        uses: actions/download-artifact@v4
        with:
          name: extensions

      - name: extract builtin extensions
        run: |
          mkdir -p builtInExtensions
          tar -xzf extensions.tar.gz -C builtInExtensions
          ls -la builtInExtensions

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ github.event.inputs.registry }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ci/release-image/Dockerfile
          tags: ${{ github.event.inputs.namespace }}/integration-web-editor:latest,${{ github.event.inputs.namespace }}/integration-web-editor:2.0.0
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=${{ runner.temp }}/devant-editor.tar
          push: true

      - name: Upload Docker image
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: ${{ runner.temp }}/devant-editor.tar
          retention-days: 30
